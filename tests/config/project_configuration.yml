tabs:
  national: "NationalData"
  subnational: "SubNationalData"

googlesheets:
  test: "https://docs.google.com/spreadsheets/d/1JOJUE853J3TFNYtBQgB8TOFNJdtfTzgqDVhaPK99q7A/edit"

json:
  additional_json:
    - name: "Other"
      source: "Some org"
      source_url: "https://data.humdata.org/organization/world-bank-group"
      format: "json"
      url: "https://raw.githubusercontent.com/OCHA-DAP/hdx-python-scraper/master/tests/fixtures/additional_json.json"
      jsonpath: "[*]"
  filepath: "test_scraper_all.json"
  additional:
    - filepath: "test_scraper_population.json"
      tabs:
        - tab: "national"
          key: "cumulative"
          filters:
            "#country+code": "{{countries_to_save}}"
          hxltags:
            - "#country+code"
            - "#country+name"
            - "#population"
    - filepath: "test_scraper_population_2.json"
      tabs:
        - tab: "national"
          key: "cumulative"
          filters:
            "#country+code":
              - "AFG"
          hxltags:
            - "#country+code"
            - "#country+name"
            - "#population"
    - filepath: "test_scraper_other.json"
      remove:
        - "national"

# national
scraper_national:
  population:
    source: "World Bank"
    source_url: "https://data.humdata.org/organization/world-bank-group"
    format: "xls"
    url: "tests/fixtures/API_SP.POP.TOTL_DS2_en_excel_v2_1302508_LIST.xls"
    sort:
      keys:
        - "Year"
    sheet: "Data"
    headers: 3
    adm_cols:
      - "Country Code"
    adm_exact: True
    date_col: "Year"
    date_type: "int"
    input_cols:
      - "Value"
    output_cols:
      - "Population"
    output_hxltags:
      - "#population"
# only for testing dividing by population
  who_national:
    source: "WHO"
    format: "csv"
    url: "tests/fixtures/WHO-COVID-19-global-data.csv"
    headers: 1
    adm_cols:
      - "Country_code"
    date_col: "Date_reported"
    date_type: "date"
    use_date_from_date_col: True
    input_cols:
      - "Cumulative_cases"
      - "Cumulative_deaths"
    process_cols:
      - "number_format(Cumulative_cases / #population * 100000, format='%.2f')"
      - "number_format(Cumulative_deaths / #population * 100000, format='%.2f')"
    output_cols:
      - "CasesPer100000"
      - "DeathsPer100000"
    output_hxltags:
      - "#affected+infected+per100000"
      - "#affected+killed+per100000"
# A fake one where we sum all values in cumulative column across dates which in practice makes no sense
  who_national2:
    source: "WHO"
    format: "csv"
    url: "tests/fixtures/WHO-COVID-19-global-data.csv"
    headers: 1
    adm_cols:
      - "Country_code"
    date_col: "Date_reported"
    date_type: "date"
    use_date_from_date_col: True
    subsets:
      - filter: "Date_reported=2020-08-06"
        input_cols:
          - "Cumulative_cases"
          - "Cumulative_deaths"
        sum_cols:
          - formula: "number_format(Cumulative_cases / #population * 100000, format='%.2f')"
            mustbepopulated: True
          - formula: "number_format(Cumulative_deaths / #population * 100000, format='%.2f')"
            mustbepopulated: True
        output_cols:
          - "Cases2Per100000"
          - "Deaths2Per100000"
        output_hxltags:
          - "#affected+infected+2+per100000"
          - "#affected+killed+2+per100000"
  access:
    source:
      "#access+visas+pct": "OCHA"
      "#access+travel+pct": "OCHA"
      "#event+year+previous+num": "Aid Workers Database"
      "#event+year+todate+num": "Aid Workers Database"
      "#event+year+previous+todate+num": "Aid Workers Database"
      "#activity+cerf+project+insecurity+pct": "UNCERF"
      "#activity+cbpf+project+insecurity+pct": "UNCERF"
      "#population+education": "UNESCO"
      "default_source": "Multiple sources"
    source_url:
      "#event+year+previous+num": "https://data.humdata.org/dataset/security-incidents-on-aid-workers"
      "#event+year+todate+num": "https://data.humdata.org/dataset/security-incidents-on-aid-workers"
      "#event+year+previous+todate+num": "https://data.humdata.org/dataset/security-incidents-on-aid-workers"
      "default_url": "https://docs.google.com/spreadsheets/d/e/2PACX-1vRSzJzuyVt9i_mkRQ2HbxrUl2Lx2VIhkTHQM-laE8NyhQTy70zQTCuFS3PXbhZGAt1l2bkoA4_dAoAP/pub?gid=1565063847&single=true&output=csv"
    format: "csv"
    url: "tests/fixtures/Access Indicators  - Data for Dashboard.csv"
    headers: 1
    use_hxl: True
    sort:
      keys:
        - "#country+code"
    input_transforms:
      "#access+visas+pct": "get_numeric_if_possible(#access+visas+pct)"
      "#access+travel+pct": "get_numeric_if_possible(#access+travel+pct)"
      "#activity+cerf+project+insecurity+pct": "get_numeric_if_possible(#activity+cerf+project+insecurity+pct)"
      "#activity+cbpf+project+insecurity+pct": "get_numeric_if_possible(#activity+cbpf+project+insecurity+pct)"
      "#population+education": "get_numeric_if_possible(#population+education)"
  sadd:
    source: "SADD"
    format: "csv"
    date: "2020-08-07"
    url: "tests/fixtures/covid-19-sex-disaggregated-data.csv"
    headers: 1
    external_filter:
      url: "https://github.com/mcarans/hdx-python-scraper/raw/master/tests/fixtures/sadd-countries-to-include.csv"
      hxltags:
        - "#country+code+v_iso2"
    adm_cols:
      - "Country code"
    input_cols:
      - "Cases (% male)"
      - "Cases (% female)"
      - "Deaths (% male)"
      - "Deaths (% female)"
    input_transforms:
      "Cases (% male)": "get_numeric_if_possible(Cases (% male))"
      "Cases (% female)": "get_numeric_if_possible(Cases (% female))"
      "Deaths (% male)": "get_numeric_if_possible(Deaths (% male))"
      "Deaths (% female)": "get_numeric_if_possible(Deaths (% female))"
    process_cols:
      - "number_format(Cases (% male))"
      - "number_format(Cases (% female))"
      - "number_format(Deaths (% male))"
      - "number_format(Deaths (% female))"
    output_cols:
      - "Cases (% male)"
      - "Cases (% female)"
      - "Deaths (% male)"
      - "Deaths (% female)"
    output_hxltags:
      - "#affected+infected+m+pct"
      - "#affected+f+infected+pct"
      - "#affected+killed+m+pct"
      - "#affected+f+killed+pct"

scraper_global:
  covax:
    source: "covax"
    format: "csv"
    date: "2020-08-07"
    url: "tests/fixtures/COVID-19 Vaccine Doses in HRP Countries - Data HXL.csv"
    headers: 1
    use_hxl: True
    adm_cols:
      - "#country+code"
    input_cols:
      - "#capacity+covax+total"
      - "#capacity+covax+delivered+doses"
      - "#capacity+others+delivered+doses"
      - "#capacity+delivered+total"
      - "#capacity+covax+pfizerbiontech+doses"
      - "#capacity+covax+azsii+doses"
      - "#capacity+covax+azskbio+doses"
    input_ignore_vals:
      - "N/A"
    input_transforms:
      "#capacity+covax+total": "get_numeric_if_possible(#capacity+covax+total) if #capacity+covax+total else 0"
      "#capacity+covax+delivered+doses": "get_numeric_if_possible(#capacity+covax+delivered+doses) if #capacity+covax+delivered+doses else 0"
      "#capacity+others+delivered+doses": "get_numeric_if_possible(#capacity+others+delivered+doses) if #capacity+others+delivered+doses else 0"
      "#capacity+delivered+total": "get_numeric_if_possible(#capacity+delivered+total) if #capacity+delivered+total else 0"
      "#capacity+covax+pfizerbiontech+doses": "get_numeric_if_possible(#capacity+covax+pfizerbiontech+doses) if #capacity+covax+pfizerbiontech+doses else 0"
      "#capacity+covax+azsii+doses": "get_numeric_if_possible(#capacity+covax+azsii+doses) if #capacity+covax+azsii+doses else 0"
      "#capacity+covax+azskbio+doses": "get_numeric_if_possible(#capacity+covax+azskbio+doses) if #capacity+covax+azskbio+doses else 0"
    sum_cols:
      - formula: "number_format(#capacity+covax+total, format='%.0f')"
        mustbepopulated: False
      - formula: "number_format(#capacity+covax+delivered+doses, format='%.0f')"
        mustbepopulated: False
      - formula: "number_format(#capacity+others+delivered+doses, format='%.0f')"
        mustbepopulated: False
      - formula: "number_format(#capacity+delivered+total, format='%.0f')"
        mustbepopulated: False
      - formula: "number_format(#capacity+covax+pfizerbiontech+doses, format='%.0f')"
        mustbepopulated: False
      - formula: "number_format(#capacity+covax+azsii+doses, format='%.0f')"
        mustbepopulated: False
      - formula: "number_format(#capacity+covax+azskbio+doses, format='%.0f')"
        mustbepopulated: False
    output_cols:
      - "Covax Interim Forecast Doses"
      - "Covax Delivered Doses"
      - "Other Delivered Doses"
      - "Total Delivered Doses"
      - "Covax Pfizer-BioNTech Doses"
      - "Covax Astrazeneca-SII Doses"
      - "Covax Astrazeneca-SKBio Doses"
    output_hxltags:
      - "#capacity+doses+forecast+covax"
      - "#capacity+doses+delivered+covax"
      - "#capacity+doses+delivered+others"
      - "#capacity+doses+delivered+total"
      - "#capacity+doses+covax+pfizerbiontech"
      - "#capacity+doses+covax+astrazenecasii"
      - "#capacity+doses+covax+astrazenecaskbio"
  ourworldindata:
    source: "Our World in Data"
    format: "csv"
    url: "tests/fixtures/ourworldindata_vaccinedoses.csv"
    headers: 1
    use_hxl: True
    adm_cols:
      - "#country+code"
    date_col: "#date"
    date_type: "date"
    date_level: "national"
    input_cols:
      - "#total+vaccinations"
    sum_cols:
      - formula: "number_format(#total+vaccinations, format='%.0f')"
        mustbepopulated: False
    output_cols:
      - "TotalDosesAdministered"
    output_hxltags:
      - "#capacity+doses+administered+total"
  cerf_global:
    format: "csv"
    url: "tests/fixtures/full_pfmb_allocations.csv"
    dataset: "cerf-covid-19-allocations"
    force_date_today: True
    headers: 1
    date_col: "AllocationYear"
    date_type: "int"
    single_maxdate: True
    subsets:
      - filter: "FundType=CBPF"
        input_cols:
          - "Budget"
        input_transforms:
          Budget: "float(Budget)"
        sum_cols:
          - formula: "Budget"
            mustbepopulated: False
        output_cols:
          - "CBPFFunding"
        output_hxltags:
          - "#value+cbpf+funding+total+usd"
      - filter: "FundType=CBPF|GenderMarker="
        input_cols:
          - "Budget"
        input_transforms:
          Budget: "float(Budget)"
        sum_cols:
          - formula: "Budget"
            mustbepopulated: False
        output_cols:
          - "CBPFFundingGMEmpty"
        output_hxltags:
          - "#value+cbpf+funding+gmempty+total+usd"
      - filter: "FundType=CBPF|GenderMarker=0"
        input_cols:
          - "Budget"
        input_transforms:
          Budget: "float(Budget)"
        sum_cols:
          - formula: "Budget"
            mustbepopulated: False
        output_cols:
          - "CBPFFundingGM0"
        output_hxltags:
          - "#value+cbpf+funding+gm0+total+usd"
      - filter: "FundType=CBPF|GenderMarker=1"
        input_cols:
          - "Budget"
        input_transforms:
          Budget: "float(Budget)"
        sum_cols:
          - formula: "Budget"
            mustbepopulated: False
        output_cols:
          - "CBPFFundingGM1"
        output_hxltags:
          - "#value+cbpf+funding+gm1+total+usd"
      - filter: "FundType=CBPF|GenderMarker=2"
        input_cols:
          - "Budget"
        input_transforms:
          Budget: "float(Budget)"
        sum_cols:
          - formula: "Budget"
            mustbepopulated: False
        output_cols:
          - "CBPFFundingGM2"
        output_hxltags:
          - "#value+cbpf+funding+gm2+total+usd"
      - filter: "FundType=CBPF|GenderMarker=3"
        input_cols:
          - "Budget"
        input_transforms:
          Budget: "float(Budget)"
        sum_cols:
          - formula: "Budget"
            mustbepopulated: False
        output_cols:
          - "CBPFFundingGM3"
        output_hxltags:
          - "#value+cbpf+funding+gm3+total+usd"
      - filter: "FundType=CBPF|GenderMarker=4"
        input_cols:
          - "Budget"
        input_transforms:
          Budget: "float(Budget)"
        sum_cols:
          - formula: "Budget"
            mustbepopulated: False
        output_cols:
          - "CBPFFundingGM4"
        output_hxltags:
          - "#value+cbpf+funding+gm4+total+usd"
      - filter: "FundType=CERF"
        input_cols:
          - "Budget"
        input_transforms:
          Budget: "float(Budget)"
        sum_cols:
          - formula: "Budget"
            mustbepopulated: False
        output_cols:
          - "CERFFunding"
        output_hxltags:
          - "#value+cerf+funding+total+usd"
      - filter: "FundType=CERF|GenderMarker="
        input_cols:
          - "Budget"
        input_transforms:
          Budget: "float(Budget)"
        sum_cols:
          - formula: "Budget"
            mustbepopulated: False
        output_cols:
          - "CERFFundingGMEmpty"
        output_hxltags:
          - "#value+cerf+funding+gmempty+total+usd"
      - filter: "FundType=CERF|GenderMarker=0"
        input_cols:
          - "Budget"
        input_transforms:
          Budget: "float(Budget)"
        sum_cols:
          - formula: "Budget"
            mustbepopulated: False
        output_cols:
          - "CERFFundingGM0"
        output_hxltags:
          - "#value+cerf+funding+gm0+total+usd"
      - filter: "FundType=CERF|GenderMarker=1"
        input_cols:
          - "Budget"
        input_transforms:
          Budget: "float(Budget)"
        sum_cols:
          - formula: "Budget"
            mustbepopulated: False
        output_cols:
          - "CERFFundingGM1"
        output_hxltags:
          - "#value+cerf+funding+gm1+total+usd"
      - filter: "FundType=CERF|GenderMarker=2"
        input_cols:
          - "Budget"
        input_transforms:
          Budget: "float(Budget)"
        sum_cols:
          - formula: "Budget"
            mustbepopulated: False
        output_cols:
          - "CERFFundingGM2"
        output_hxltags:
          - "#value+cerf+funding+gm2+total+usd"
      - filter: "FundType=CERF|GenderMarker=3"
        input_cols:
          - "Budget"
        input_transforms:
          Budget: "float(Budget)"
        sum_cols:
          - formula: "Budget"
            mustbepopulated: False
        output_cols:
          - "CERFFundingGM3"
        output_hxltags:
          - "#value+cerf+funding+gm3+total+usd"
      - filter: "FundType=CERF|GenderMarker=4"
        input_cols:
          - "Budget"
        input_transforms:
          Budget: "float(Budget)"
        sum_cols:
          - formula: "Budget"
            mustbepopulated: False
        output_cols:
          - "CERFFundingGM4"
        output_hxltags:
          - "#value+cerf+funding+gm4+total+usd"


other:
  gam:
    source: "UNICEF"
    format: "xlsx"
    url: "tests/fixtures/unicef_who_wb_global_expanded_databases_severe_wasting.xlsx"
    sheet: "Trend"
    headers:
      - 3
      - 4
    flatten:
      - original: "Region {{1}} Region Name"
        new: "Region Name"
      - original: "Region {{1}} Point Estimate"
        new: "Region Point Estimate"
    adm_cols:
      - "ISO"
      - "Region Name"
    adm_vals:
      - ["AFG"]
      - ["AF09", "AF24"]
    date_col: "Year*"
    date_type: "int"
    input_cols:
      - "Region Point Estimate"
    output_cols:
      - "Malnutrition Estimate"
    output_hxltags:
      - "#severity+malnutrition+num+subnational"
  ourworldindata:
    source: "Our World in Data"
    format: "csv"
    url: "tests/fixtures/ourworldindata_vaccinedoses.csv"
    headers: 1
    use_hxl: True
    adm_cols:
      - "#country+code"
    adm_vals:
      - "OWID_WRL"
    date_col: "#date"
    date_type: "date"
    date_level: "national"
    input_cols:
      - "#total+vaccinations"
    output_cols:
      - "TotalDosesAdministered"
    output_hxltags:
      - "#capacity+doses+administered+total"

scraper_subnational:
  gam:
    source: "UNICEF"
    format: "xlsx"
    url: "tests/fixtures/unicef_who_wb_global_expanded_databases_severe_wasting.xlsx"
    sheet: "Trend"
    headers:
      - 3
      - 4
    flatten:
      - original: "Region {{1}} Region Name"
        new: "Region Name"
      - original: "Region {{1}} Point Estimate"
        new: "Region Point Estimate"
    adm_cols:
      - "ISO"
      - "Region Name"
    date_col: "Year*"
    date_type: "int"
    input_cols:
      - "Region Point Estimate"
    output_cols:
      - "Malnutrition Estimate"
    output_hxltags:
      - "#severity+malnutrition+num+subnational"

HRPs:
  - AFG
  - BDI
  - BFA
  - CAF
  - CMR
  - COD
  - COL
  - ETH
  - HTI
  - IRQ
  - LBY
  - MLI
  - MMR
  - MOZ
  - NER
  - NGA
  - PAK
  - PSE
  - SDN
  - SOM
  - SSD
  - SYR
  - TCD
  - UKR
  - VEN
  - YEM
  - ZWE

admin1_info:
  - {pcode: AF01, name: Kabul, iso2: AF, iso3: AFG, country: Afghanistan}
  - {pcode: AF02, name: Kapisa, iso2: AF, iso3: AFG, country: Afghanistan}
  - {pcode: AF03, name: Parwan, iso2: AF, iso3: AFG, country: Afghanistan}
  - {pcode: AF04, name: Maidan Wardak, iso2: AF, iso3: AFG, country: Afghanistan}
  - {pcode: AF05, name: Logar, iso2: AF, iso3: AFG, country: Afghanistan}
  - {pcode: AF06, name: Nangarhar, iso2: AF, iso3: AFG, country: Afghanistan}
  - {pcode: AF07, name: Laghman, iso2: AF, iso3: AFG, country: Afghanistan}
  - {pcode: AF08, name: Panjsher, iso2: AF, iso3: AFG, country: Afghanistan}
  - {pcode: AF09, name: Baghlan, iso2: AF, iso3: AFG, country: Afghanistan}
  - {pcode: AF10, name: Bamyan, iso2: AF, iso3: AFG, country: Afghanistan}
  - {pcode: AF11, name: Ghazni, iso2: AF, iso3: AFG, country: Afghanistan}
  - {pcode: AF12, name: Paktika, iso2: AF, iso3: AFG, country: Afghanistan}
  - {pcode: AF13, name: Paktya, iso2: AF, iso3: AFG, country: Afghanistan}
  - {pcode: AF14, name: Khost, iso2: AF, iso3: AFG, country: Afghanistan}
  - {pcode: AF15, name: Kunar, iso2: AF, iso3: AFG, country: Afghanistan}
  - {pcode: AF16, name: Nuristan, iso2: AF, iso3: AFG, country: Afghanistan}
  - {pcode: AF17, name: Badakhshan, iso2: AF, iso3: AFG, country: Afghanistan}
  - {pcode: AF18, name: Takhar, iso2: AF, iso3: AFG, country: Afghanistan}
  - {pcode: AF19, name: Kunduz, iso2: AF, iso3: AFG, country: Afghanistan}
  - {pcode: AF20, name: Samangan, iso2: AF, iso3: AFG, country: Afghanistan}
  - {pcode: AF21, name: Balkh, iso2: AF, iso3: AFG, country: Afghanistan}
  - {pcode: AF22, name: Sar E Pul, iso2: AF, iso3: AFG, country: Afghanistan}
  - {pcode: AF23, name: Ghor, iso2: AF, iso3: AFG, country: Afghanistan}
  - {pcode: AF24, name: Daykundi, iso2: AF, iso3: AFG, country: Afghanistan}
  - {pcode: AF25, name: Uruzgan, iso2: AF, iso3: AFG, country: Afghanistan}
  - {pcode: AF26, name: Zabul, iso2: AF, iso3: AFG, country: Afghanistan}
  - {pcode: AF27, name: Kandahar, iso2: AF, iso3: AFG, country: Afghanistan}
  - {pcode: AF28, name: Jawzjan, iso2: AF, iso3: AFG, country: Afghanistan}
  - {pcode: AF29, name: Faryab, iso2: AF, iso3: AFG, country: Afghanistan}
  - {pcode: AF30, name: Hilmand, iso2: AF, iso3: AFG, country: Afghanistan}
  - {pcode: AF31, name: Badghis, iso2: AF, iso3: AFG, country: Afghanistan}
  - {pcode: AF32, name: Hirat, iso2: AF, iso3: AFG, country: Afghanistan}
  - {pcode: AF33, name: Farah, iso2: AF, iso3: AFG, country: Afghanistan}
  - {pcode: AF34, name: Nimroz, iso2: AF, iso3: AFG, country: Afghanistan}
